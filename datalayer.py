# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pwagis
                                 A QGIS plugin
 PWA
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-15
        git sha              : $Format:%H$
        copyright            : (C) 2024 by PWA
        email                : pwa
 ***************************************************************************/
"""
from qgis.core import QgsProject, QgsRectangle, QgsRasterLayer
from qgis.gui import QgsLayerTreeMapCanvasBridge
from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtGui import QIcon, QPixmap
import datetime
import os.path
import os
import json
import requests
import shutil
import configparser
import pandas as pd
from urllib.request import urlopen
from pwagis.utiles import *
from shapely.wkt import loads


def setTileIcon(self):
    meterIconFile = "Meter.png"
    meterIcon = os.path.join(self.plugin_dir, "icon", meterIconFile)
    self.dockwidget.meterIcon.setPixmap(QPixmap(meterIcon))

    flowMeterIconFile = "o.png"
    flowMeterIcon = os.path.join(self.plugin_dir, "icon", flowMeterIconFile)
    self.dockwidget.flowMeterIcon.setPixmap(QPixmap(flowMeterIcon))

    valveIconFile = "Valve1.png"
    valveIcon = os.path.join(self.plugin_dir, "icon", valveIconFile)
    self.dockwidget.valveIcon.setPixmap(QPixmap(valveIcon))

    fireIconFile = "Firehydrant150.png"
    fireIcon = os.path.join(self.plugin_dir, "icon", fireIconFile)
    self.dockwidget.fireIcon.setPixmap(QPixmap(fireIcon))

    leakIconFile = "Leakpoint.png"
    leakIcon = os.path.join(self.plugin_dir, "icon", leakIconFile)
    self.dockwidget.leakIcon.setPixmap(QPixmap(leakIcon))

    pipeIconFile = "Create pipe.png"
    pipeIcon = os.path.join(self.plugin_dir, "icon", pipeIconFile)
    self.dockwidget.pipeIcon.setPixmap(QPixmap(pipeIcon))

    pwaIconFile = "Valve1.png"
    pwaIcon = os.path.join(self.plugin_dir, "icon", pwaIconFile)
    self.dockwidget.pwaIcon.setPixmap(QPixmap(pwaIcon))

    structIconFile = "o.png"
    structIcon = os.path.join(self.plugin_dir, "icon", structIconFile)
    self.dockwidget.structIcon.setPixmap(QPixmap(structIcon))

    bldgIconFile = "BDG2.png"
    bldgIcon = os.path.join(self.plugin_dir, "icon", bldgIconFile)
    self.dockwidget.bldgIcon.setPixmap(QPixmap(bldgIcon))

    pipeServIconFile = "o.png"
    pipeServIcon = os.path.join(self.plugin_dir, "icon", pipeServIconFile)
    self.dockwidget.pipeServIcon.setPixmap(QPixmap(pipeServIcon))

    dmaIconFile = "DMA.png"
    dmaIcon = os.path.join(self.plugin_dir, "icon", dmaIconFile)
    self.dockwidget.dmaIcon.setPixmap(QPixmap(dmaIcon))

    stepIconFile = "o.png"
    stepIcon = os.path.join(self.plugin_dir, "icon", stepIconFile)
    self.dockwidget.stepIcon.setPixmap(QPixmap(stepIcon))


def get_Tile_by_Branch(self):
    layer_type = ['STEP_TEST', 'DMA_BOUNDARY', 'PIPE_SERV', 'BLDG', 'STRUCT', 'PWA_WATERWORKS', 'PIPE', 'LEAKPOINT', 'FIREHYDRANT', 'VALVE', 'FLOW_METER', 'METER']

    name = []
    title = []
    boud_list = []
    style_list = []
    display_name = []
    if checkNetConnection() is True:
        t_status = check_token_expired(self)
        if t_status == "1":
            t_status = load_new_token(self)
        if t_status == "0":

            for layerType in layer_type:

                search_txt = "B" + self.currentbranch + "_" + layerType
                tile_name = "TILE_" + search_txt
                url = self.baseUrl + "/api/2.0/resources/tiles/pwa/" + search_txt
                payload = {}
                headers = {
                    'Authorization': 'Bearer ' + self.token_new
                }

                response = requests.request("GET", url, headers=headers, data=payload)
                if response.status_code == 200:
                    if "name" in response.json():
                        layer_name = response.json()["name"]
                        # show_name = response.json()["description"]
                        show_name = layer_name.split('_')
                        # "name": "TILE_B5511034_DMA_BOUNDARY",
                        layer_title = response.json()["tiles"][0]
                        layer_bounds = response.json()["bounds"]
                        filesize = response.json()["filesize"]
                        # tile_id for each layer to create style
                        tileId = response.json()["id"]
                        if layer_name == tile_name and filesize > 0:

                            display_name.append(show_name)
                            name.append(layer_name)
                            title.append(layer_title)
                            boud_list.append(layer_bounds)
                            create_style(self, tileId=tileId, layerType=layerType)
                            style_path = os.path.join(self.plugin_dir, "style")
                            style_Url = "styleUrl=file:///" + style_path + "/B" + str(self.currentbranch) + "_" + layerType + ".json&"

                            style_list.append(style_Url)
                            if layerType == "PIPE" and layer_name == tile_name:
                                self.dockwidget.pipeComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "BLDG" and layer_name == tile_name:
                                self.dockwidget.bldgComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "METER" and layer_name == tile_name:
                                self.dockwidget.meterComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "VALVE" and layer_name == tile_name:
                                self.dockwidget.valveComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "FIREHYDRANT" and layer_name == tile_name:
                                self.dockwidget.firehydrantComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "LEAKPOINT" and layer_name == tile_name:
                                self.dockwidget.leakpointComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "PWA_WATERWORKS" and layer_name == tile_name:
                                self.dockwidget.pwa_waterworksComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "FLOW_METER" and layer_name == tile_name:
                                self.dockwidget.nrw_meterComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "DMA_BOUNDARY" and layer_name == tile_name:
                                self.dockwidget.dma_boundaryComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "PIPE_SERV" and layer_name == tile_name:
                                self.dockwidget.pipe_servComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "STRUCT" and layer_name == tile_name:
                                self.dockwidget.structComboBox.addItem("แสดงข้อมูล")
                            elif layerType == "STEP_TEST" and layer_name == tile_name:
                                self.dockwidget.step_testComboBox.addItem("แสดงข้อมูล")
                else:
                    message = "TILE " + layerType + " not found "
                    self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)
        else:
            message = "Can not get token from server"
            self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)
    else:
        message = "No internet connection."
        self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)
    return name, title, boud_list, style_list, display_name


def createGroup(self, groupName):
    root = QgsProject.instance().layerTreeRoot()
    group = root.addGroup(groupName)
    return group, root


def load_Tile(self, tile_name, tile_title, styleUrl, display_name, group, root):
    if checkNetConnection() is True:
        for i in range(len(tile_name)):
            # With Style
            url_tile = styleUrl[i] + 'type=xyz&url=' + str(tile_title[i]) + '&zmax=14&zmin=0&http-header:referer='
            # Without Style
            layerTileName = display_name[i]
            # "name": "TILE_B5511034_DMA_BOUNDARY",
            layer_tile_name = ""
            if len(layerTileName) > 3:
                if str(layerTileName[2]) == 'PIPE' and str(layerTileName[3]) == 'SERV':
                    layer_tile_name = str(layerTileName[2]) + "_" + str(layerTileName[3])
                elif str(layerTileName[2]) == 'PWA':
                    layer_tile_name = str(layerTileName[2])
                elif str(layerTileName[2]) == 'DMA':
                    layer_tile_name = str(layerTileName[2])
                elif str(layerTileName[2]) == 'FLOW':
                    layer_tile_name = str(layerTileName[2])
                elif str(layerTileName[2]) == 'STEP':
                    layer_tile_name = str(layerTileName[2])
            else:
                layer_tile_name = str(layerTileName[2])

            self.iface.addVectorTileLayer(url_tile, layer_tile_name)
            layer = QgsProject.instance().mapLayersByName(layer_tile_name)

            if layer:
                layer = layer[0]
                # Find the layer's current tree node
                layer_tree_layer = root.findLayer(layer.id())
                if layer_tree_layer:
                    # Clone the layer to the group and remove from root
                    clone = layer_tree_layer.clone()
                    group.insertChildNode(0, clone)
                    root.removeChildNode(layer_tree_layer)
            # self.iface.addVectorTileLayer(url_tile, str(display_name[i]))

    else:
        message = "No internet connection."
        self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)


def zoomToPoint(self, wkt_string):
        scale = float(0.0005)
        canvas = self.iface.mapCanvas()
        bbox = loads(wkt_string)
        Xmin = bbox.bounds[0]
        Ymax = bbox.bounds[1]
        Xmax = bbox.bounds[2]
        Ymin = bbox.bounds[3]
        rect = QgsRectangle(float(Xmin)-scale, float(Ymax)-scale, float(Xmax)+scale, float(Ymin)+scale)
        canvas.setExtent(rect)        
        canvas.refresh()
        # Get bbox from current view
        extent = self.iface.mapCanvas().extent()


def load_world_map(self):
    url = "type=xyz&url=https://basemap.sphere.gistda.or.th/tiles/thailand_images/EPSG3857/{z}/{x}/{y}.jpeg?key=AC2AA5ADB2964AF9974CF8C638D31B74"
    layer_name = "GISTDA Sphere"
    layer = QgsRasterLayer(url, layer_name, "wms")
    if not layer.isValid():
        print("Layer failed to load!")
    else:
        QgsProject.instance().addMapLayer(layer)
    return layer


def load_world_map2(self):
    url = "type=xyz&url=https://mt1.google.com/vt/lyrs%3Dr%26x%3D%7Bx%7D%26y%3D%7By%7D%26z%3D%7Bz%7D&zmax=20&zmin=0&crs=EPSG4326&http-header:referer="
    layer_name = "Google Map"
    layer = QgsRasterLayer(url, layer_name, "wms")
    if not layer.isValid():
        print("Layer failed to load!")
    else:
        QgsProject.instance().addMapLayer(layer)
    return layer

def load_world_map3(self):
    url = "type=xyz&url=https://mt1.google.com/vt/lyrs%3Ds%26x%3D%7Bx%7D%26y%3D%7By%7D%26z%3D%7Bz%7D%26zmax=20&zmin=0&crs=EPSG4326&http-header:referer="
    layer_name = "Google Satellite"
    layer = QgsRasterLayer(url, layer_name, "wms")
    if not layer.isValid():
        print("Layer failed to load!")
    else:
        QgsProject.instance().addMapLayer(layer)
    return layer

def load_world_map4(self):
    url = "type=xyz&url=https://gisdb.pwa.co.th/pmtile/L7018/{z}/{x}/{y}.webp?api_key=ivrfZovKdvBY3EomNxAtnbzG8aWS5MGg"
    layer_name = "Topographic Map"
    layer = QgsRasterLayer(url, layer_name, "wms")
    if not layer.isValid():
        print("Layer failed to load!")
    else:
        QgsProject.instance().addMapLayer(layer)
    return layer

def zoomto_layer(self, bounds):
    scale = 0.25
    Xmin = bounds[0]
    Ymax = bounds[1]
    Xmax = bounds[2]
    Ymin = bounds[3]
    rect = QgsRectangle(float(Xmin) - scale, float(Ymax) - scale, float(Xmax) + scale, float(Ymin) + scale)
    return rect


def get_bound(self):
    if checkNetConnection() is True:
        t_status = check_token_expired(self)
        if t_status == "1":
            t_status = load_new_token(self)
        if t_status == "0":

            url = self.baseUrl + "/api/2.0/resources/features/pwa/collections?title=B" + self.currentbranch + "_PIPE"

            payload = {}
            headers = {
                'Authorization': 'Bearer ' + self.token_new
            }
            response = requests.request("GET", url, headers=headers, data=payload)
            collections = response.json()["collections"]
            collections_id = collections[0]["id"]
            # Get C from pipe
            url = self.baseUrl + "/api/2.0/resources/features/pwa/collections/" + collections_id + "/items"

            payload = {}
            headers = {
                'Authorization': 'Bearer ' + self.token_new
            }
            response = requests.request("GET", url, headers=headers, data=payload)
            if response.status_code == 200:
                try:
                    features = response.json()["features"]
                    coordinates = features[0]["geometry"]["coordinates"]

                    for a in range(len(coordinates)):
                        x = str(coordinates[a][0])
                        y = str(coordinates[a][1])
                        if a == 0:
                            geo_text = str(x) + " " + str(y)
                        else:
                            geo_text = geo_text + ", " + str(x) + " " + str(y)
                    geo_text = "LineString (" + geo_text + ")"
                    bbox = loads(geo_text)
                    bounds = []
                    bounds.append(bbox.bounds[0])
                    bounds.append(bbox.bounds[1])
                    bounds.append(bbox.bounds[2])
                    bounds.append(bbox.bounds[3])
                    return bounds
                except:
                    pass
            else:
                message = "Can not get bounding box from server"
                self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)
        else:
            message = "Can not get token from server"
            self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)
    else:
        message = "No internet connection."
        self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)


def getTileValue(fieldsName, feature):
    returnValue = None
    liseField = feature.fields().names()

    for list_field in liseField:
        if list_field == fieldsName:
            returnValue = feature[fieldsName]

    return returnValue


def fire_from(self, feature, activeLayer):
    test_layer = getTileValue("pressure", feature)
    if test_layer is not None:
        # get filed name
        self.dlg_fire.status_text.clear()
        self.dlg_fire.size_text.clear()
        firehydrantId = getTileValue("firehydrantId", feature)
        try:
            self.dlg_fire.setWindowTitle(str(activeLayer) + ': ' + str(int(firehydrantId)))
        except Exception as e:
            self.dlg_fire.setWindowTitle(str(activeLayer) + ': ' + str(firehydrantId))
        try:
            self.dlg_fire.firehydrantId.setText(str(int(firehydrantId)))
        except Exception as e:
            self.dlg_fire.firehydrantId.setText(str(firehydrantId))

        globalId = getTileValue("globalId", feature)
        self.dlg_fire.globalId.setText(str(globalId))
        sizeId = getTileValue("sizeId", feature)
        firSize = load_FireSize(self, sizeId)
        self.dlg_fire.size_text.addItem(str(firSize))
        statusId = getTileValue("statusId", feature)
        fireStatus = load_FireStatus(self, statusId)
        self.dlg_fire.status_text.addItem(str(fireStatus))
        pressure = getTileValue("pressure", feature)
        self.dlg_fire.pressure.setText(str(pressure))
        pressureHistory = getTileValue("pressureHistory", feature)
        self.dlg_fire.pressureHistory_text.setFilePath(str(pressureHistory))
        picturePath = getTileValue("picturePath", feature)
        self.dlg_fire.picturePath_text.setFilePath(str(picturePath))
        recordDate = getTileValue("recordDate", feature)
        self.dlg_fire.recodeCalendar.setText(str(recordDate))
        remark = getTileValue("remark", feature)
        self.dlg_fire.remark.setText(str(remark))
        self.dlg_fire.groupBox.setEnabled(True)
        self.dlg_fire.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_fire.show()
    else:
        print("Layer in not " + str(activeLayer))


def dma_form(self, feature, activeLayer):
    """
    dmaName, dmaNo, globalId, pwaCode, recordDate, remark
    """
    test_layer = getTileValue("dmaNo", feature)
    if test_layer is not None:
        dmaId = getTileValue("dmaId", feature)
        try:
            self.dlg_dma.setWindowTitle(str(activeLayer) + ': ' + str(int(dmaId)))
        except Exception as e:
            self.dlg_dma.setWindowTitle(str(activeLayer) + ': ' + str(dmaId))
        try:
            self.dlg_dma.dmaId.setText(str(int(dmaId)))
        except Exception as e:
            self.dlg_dma.dmaId.setText(str(dmaId))

        globalId = getTileValue("globalId", feature)
        self.dlg_dma.globalId.setText(str(globalId))

        dmaNo = getTileValue("dmaNo", feature)
        self.dlg_dma.dmaNo.setText(str(dmaNo))

        dmaName = getTileValue("dmaName", feature)
        self.dlg_dma.dmaName.setText(str(dmaName))
        self.dlg_dma.setWindowTitle(str(activeLayer) + ': ' + str(dmaName))

        dmaPrswtusg = getTileValue("dmaPrswtusg", feature)
        self.dlg_dma.dmaPrswtusg.setText(str(dmaPrswtusg))

        amountCust = getTileValue("amountCust", feature)
        self.dlg_dma.amountCust.setText(str(amountCust))

        dmaAvgwtusg = getTileValue("dmaAvgwtusg", feature)
        self.dlg_dma.dmaAvgwtusg.setText(str(dmaAvgwtusg))

        amountFlow = getTileValue("amountFlow", feature)
        self.dlg_dma.amountFlow.setText(str(amountFlow))

        nonRevenuePercentPrs = getTileValue("nonRevenuePercentPrs", feature)
        self.dlg_dma.nonRevenuePercentPrs.setText(str(nonRevenuePercentPrs))

        nonRevenuePercentAvg = getTileValue("nonRevenuePercentAvg", feature)
        self.dlg_dma.nonRevenuePercentAvg.setText(str(nonRevenuePercentAvg))

        remark = getTileValue("remark", feature)
        self.dlg_dma.remark.setText(str(remark))

        self.dlg_dma.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_dma.show()
    else:
        print("Layer in not " + str(activeLayer))


def pwaWaterworks_form(self, feature, activeLayer):
    test_layer = getTileValue("costCenterId", feature)
    if test_layer is not None:
        self.dlg_pwaWaterworks.costCenter_text.clear()
        self.dlg_pwaWaterworks.pwaStation_text.clear()
        pwaId = getTileValue("pwaId", feature)
        try:
            self.dlg_pwaWaterworks.setWindowTitle(str(activeLayer) + ': ' + str(int(pwaId)))
        except Exception as e:
            self.dlg_pwaWaterworks.setWindowTitle(str(activeLayer) + ': ' + str(pwaId))
        try:
            self.dlg_pwaWaterworks.pwaId.setText(str(int(pwaId)))
        except Exception as e:
            self.dlg_pwaWaterworks.pwaId.setText(str(pwaId))

        costCenterId = getTileValue("costCenterId", feature)
        costCenter_text = load_costCenters(self, costCenterId)
        self.dlg_pwaWaterworks.costCenter_text.addItem(str(costCenter_text))

        pwaname = getTileValue("name", feature)
        self.dlg_pwaWaterworks.name.setText(str(pwaname))

        pwaAddress = getTileValue("pwaAddress", feature)
        self.dlg_pwaWaterworks.pwaAddress.setText(str(pwaAddress))

        remark = getTileValue("remark", feature)
        self.dlg_pwaWaterworks.remark.setText(str(remark))

        pwaStationId = getTileValue("pwaStationId", feature)
        pwaStation_text = load_pwaStations(self, pwaStationId)
        self.dlg_pwaWaterworks.pwaStation_text.addItem(str(pwaStation_text))

        picturePwa = getTileValue("picturePwa", feature)
        self.dlg_pwaWaterworks.picturePwa.setFilePath(str(picturePwa))

        drawingPath = getTileValue("drawingPath", feature)
        self.dlg_pwaWaterworks.drawingPath.setFilePath(str(drawingPath))

        pictureResource = getTileValue("pictureResource", feature)
        self.dlg_pwaWaterworks.pictureResource.setText(str(pictureResource))

        waterResource = getTileValue("waterResource", feature)
        self.dlg_pwaWaterworks.waterResource.setText(str(waterResource))

        self.dlg_pwaWaterworks.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_pwaWaterworks.show()
    else:
        print("Layer in not " + str(activeLayer))


def valve_form(self, feature, activeLayer):
    test_layer = getTileValue("typeId", feature)
    if test_layer is not None:
        self.dlg_valve.status_text.clear()
        self.dlg_valve.type_text.clear()
        self.dlg_valve.size_text.clear()
        self.dlg_valve.function_text.clear()

        valveId = getTileValue("valveId", feature)
        try:
            self.dlg_valve.setWindowTitle(str(activeLayer) + ': ' + str(int(valveId)))
        except Exception as e:
            self.dlg_valve.setWindowTitle(str(activeLayer) + ': ' + str(valveId))
        try:
            self.dlg_valve.valveId.setText(str(int(valveId)))
        except Exception as e:
            self.dlg_valve.valveId.setText(str(valveId))

        globalId = getTileValue("globalId", feature)
        self.dlg_valve.globalId.setText(str(globalId))

        statusId = getTileValue("statusId", feature)
        status_text = load_valeStatus(self, statusId)
        self.dlg_valve.status_text.addItem(str(status_text))

        typeId = getTileValue("typeId", feature)
        type_text = load_valveType(self, typeId)
        self.dlg_valve.type_text.addItem(str(type_text))

        sizeId = getTileValue("sizeId", feature)
        size_text = load_valveSize(self, sizeId)
        self.dlg_valve.size_text.addItem(str(size_text))

        functionId = getTileValue("functionId", feature)
        function_text = load_valveFunction(self, functionId)
        self.dlg_valve.function_text.addItem(str(function_text))

        yearInstall = getTileValue("yearInstall", feature)
        self.dlg_valve.yearInstall.setText(str(yearInstall))

        depth = getTileValue("depth", feature)
        self.dlg_valve.depth.setText(str(depth))

        roundOpen = getTileValue("roundOpen", feature)
        self.dlg_valve.roundOpen.setText(str(roundOpen))

        drawingPath = getTileValue("drawingPath", feature)
        self.dlg_valve.drawingPath_text.setFilePath(str(drawingPath))

        picturePath = getTileValue("picturePath", feature)
        self.dlg_valve.picturePath_text.setFilePath(str(picturePath))

        remark = getTileValue("remark", feature)
        self.dlg_valve.remark.setText(str(remark))

        self.dlg_valve.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_valve.show()
    else:
        print("Layer in not " + str(activeLayer))


def pipe_form(self, feature, activeLayer):
    test_layer = getTileValue("typeId", feature)
    if test_layer is not None:
        self.dlg_pipe.groupBox_2.setEnabled(True)
        self.dlg_pipe.groupBox.setEnabled(True)
        # reset combo
        self.dlg_pipe.type_text.clear()
        self.dlg_pipe.grade_text.clear()
        self.dlg_pipe.class_text.clear()
        self.dlg_pipe.function_text.clear()
        self.dlg_pipe.laying_text.clear()
        self.dlg_pipe.product_text.clear()
        self.dlg_pipe.size_text.clear()

        pipeId = getTileValue("pipeId", feature)
        try:
            self.dlg_pipe.setWindowTitle(str(activeLayer) + ': ' + str(int(pipeId)))
        except Exception as e:
            self.dlg_pipe.setWindowTitle(str(activeLayer) + ': ' + str(pipeId))
        try:
            self.dlg_pipe.pipeId.setText(str(int(pipeId)))
        except Exception as e:
            self.dlg_pipe.pipeId.setText(str(pipeId))

        globalId = getTileValue("globalId", feature)
        self.dlg_pipe.globalId.setText(str(globalId))
        projectNo = getTileValue("projectNo", feature)
        self.dlg_pipe.projectNo.setText(str(projectNo))
        projectName = getTileValue("projectName", feature)
        self.dlg_pipe.projectName.setPlainText(str(projectName))
        assetCode = getTileValue("assetCode", feature)
        self.dlg_pipe.assetCode.setText(str(assetCode))

        typeId = getTileValue("typeId", feature)
        pipeType = load_PipeType(self, typeId)
        self.dlg_pipe.type_text.addItem(str(pipeType))

        gradeId = getTileValue("gradeId", feature)
        pipeGrade = load_PipeGrade(self, gradeId)
        self.dlg_pipe.grade_text.addItem(str(pipeGrade))

        sizeId = getTileValue("sizeId", feature)
        pipeSize = load_PipeSize(self, sizeId)
        self.dlg_pipe.size_text.addItem(str(pipeSize))

        classId = getTileValue("classId", feature)
        pipeClass = load_PipeClasses(self, classId)
        self.dlg_pipe.class_text.addItem(str(pipeClass))

        functionId = getTileValue("functionId", feature)
        pipeFunction = load_PipeFunction(self, functionId)
        self.dlg_pipe.function_text.addItem(str(pipeFunction))

        layingId = getTileValue("layingId", feature)
        pipeLaying = load_PipeLaying(self, layingId)
        self.dlg_pipe.laying_text.addItem(str(pipeLaying))

        productId = getTileValue("productId", feature)
        pipeProduct = load_PipeProduct(self, productId)
        self.dlg_pipe.product_text.addItem(str(pipeProduct))

        yearInstall = getTileValue("yearInstall", feature)
        self.dlg_pipe.yearInstall.setText(str(yearInstall))

        depth = getTileValue("depth", feature)
        self.dlg_pipe.depth.setText(str(depth))

        length = getTileValue("length", feature)
        self.dlg_pipe.length.setText(str(length))

        locate = getTileValue("locate", feature)
        self.dlg_pipe.locate.setText(str(locate))

        remark = getTileValue("remark", feature)
        self.dlg_pipe.remark.setText(str(remark))

        self.dlg_pipe.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_pipe.show()
    else:
        print("Layer in not " + str(activeLayer))


def bldg_form(self, feature, activeLayer):
    test_layer = getTileValue("buildingTypeId", feature)
    if test_layer is not None:
        self.dlg_bldg.buildingType_text.clear()
        self.dlg_bldg.useStatu_text.clear()
        self.dlg_bldg.useType_text.clear()

        self.dlg_bldg.custName_Surname.setText("")
        self.dlg_bldg.addressNo_cus.setText("")
        self.dlg_bldg.BUILDING.setText("")
        self.dlg_bldg.FLOOR.setText("")
        self.dlg_bldg.VILLAGE.setText("")
        self.dlg_bldg.VILLAGENO.setText("")
        self.dlg_bldg.ROAD.setText("")
        self.dlg_bldg.SOI.setText("")
        self.dlg_bldg.SUBDISTRICT.setText("")
        self.dlg_bldg.DISTRICT.setText("")
        self.dlg_bldg.PROVINCE.setText("")
        self.dlg_bldg.ZIPCODE.setText("")
        self.dlg_bldg.tel.setText("")

        bldgId = getTileValue("bldgId", feature)
        try:
            self.dlg_bldg.setWindowTitle(str(activeLayer) + ': ' + str(int(bldgId)))
        except Exception as e:
            self.dlg_bldg.setWindowTitle(str(activeLayer) + ': ' + str(bldgId))
        try:
            self.dlg_bldg.bldgId.setText(str(int(bldgId)))
        except Exception as e:
            self.dlg_bldg.bldgId.setText(str(bldgId))

        globalId = getTileValue("globalId", feature)
        self.dlg_bldg.globalId.setText(str(globalId))
        custCode = getTileValue("custCode", feature)
        self.dlg_bldg.custCode.setText(str(custCode))

        if custCode != '' or custCode != 'NULL':
            lodCusAddressTile(self)

        addressNo = getTileValue("addressNo", feature)
        self.dlg_bldg.addressNo.setText(str(addressNo))

        buildingTypeId = getTileValue("buildingTypeId", feature)
        bldgType = load_bldgType(self, buildingTypeId)
        self.dlg_bldg.buildingType_text.addItem(str(bldgType))

        useStatusId = getTileValue("useStatusId", feature)
        useStatus = load_bldgUseStatus(self, useStatusId)
        self.dlg_bldg.useStatu_text.addItem(str(useStatus))

        useTypeId = getTileValue("useTypeId", feature)
        if useTypeId is not None:
            useType = load_bldgUseType(self, useTypeId)
        else:
            useType = None
        self.dlg_bldg.useType_text.addItem(str(useType))

        houseCode = getTileValue("houseCode", feature)
        self.dlg_bldg.houseCode.setText(str(houseCode))
        remark = getTileValue("remark", feature)
        self.dlg_bldg.remark.setText(str(remark))

        self.dlg_bldg.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_bldg.show()
    else:
        print("Layer in not " + str(activeLayer))


def meter_form(self, feature, activeLayer):
    test_layer = getTileValue("meterNo", feature)
    if test_layer is not None:
        self.dlg_meter.tabWidget.setCurrentIndex(0)
        """
        self.dlg_meter.groupBox_2.setEnabled(False)
        self.dlg_meter.groupBox_3.setEnabled(False)
        self.dlg_meter.groupBox_4.setEnabled(False)
        """

        self.dlg_meter.custstat_text.clear()
        self.dlg_meter.mtrmkCode_text.clear()
        self.dlg_meter.meterSize_text.clear()
        self.dlg_meter.useType_text.clear()
        self.dlg_meter.meterStat_text.clear()

        self.dlg_meter.MTRSEQ.setText("")
        self.dlg_meter.MTRRDROUTE.setText("")
        self.dlg_meter.custName_Surname.setText("")
        self.dlg_meter.addressNo_cus.setText("")
        self.dlg_meter.BUILDING.setText("")
        self.dlg_meter.FLOOR.setText("")
        self.dlg_meter.VILLAGE.setText("")
        self.dlg_meter.VILLAGENO.setText("")
        self.dlg_meter.ROAD.setText("")
        self.dlg_meter.SOI.setText("")
        self.dlg_meter.SUBDISTRICT.setText("")
        self.dlg_meter.DISTRICT.setText("")
        self.dlg_meter.PROVINCE.setText("")
        self.dlg_meter.ZIPCODE.setText("")
        self.dlg_meter.tel.setText("")
        self.dlg_meter.CONTRACNO.setText("")

        meterNo = getTileValue("meterNo", feature)
        self.dlg_meter.setWindowTitle(str(activeLayer) + ': ' + str(meterNo))
        self.dlg_meter.meterNo.setText(str(meterNo))

        globalId = getTileValue("globalId", feature)
        self.dlg_meter.globalId.setText(str(globalId))

        addressNo = getTileValue("addressNo", feature)
        self.dlg_meter.addressNo.setText(addressNo)

        bldgId = getTileValue("buildingId", feature)
        self.dlg_meter.buildingId.setText(bldgId)

        pipeId = getTileValue("pipeId", feature)
        self.dlg_meter.pipeId.setText(pipeId)

        custCode = getTileValue("custCode", feature)
        self.dlg_meter.custCode.setText(custCode)

        if custCode != '' or custCode != 'NULL':
            loadCusAddressMeterTile(self)

        bldgCollection = getCollectionID_new(self, "BLDG")
        useStatusId_fea, useTypeId_fea = getBldg(self, bldgCollection, custCode)

        custstat_text = load_bldgUseStatus(self, useStatusId_fea)
        self.dlg_meter.custstat_text.addItem(str(custstat_text))

        useTypeId = getTileValue("useTypeId", feature)
        if useTypeId is not None:
            useType_text = load_bldgUseType(self, useTypeId)
        else:
            useType_text = None
        # self.dlg_bldg.useType_text.addItem(str(useType))
        self.dlg_meter.useType_text.addItem(str(useType_text))
        # useType_text = load_bldgUseType(self, useTypeId_fea)
        # self.dlg_meter.useType_text.addItem(str(useType_text))

        items = load_meter(self,  meterNo)

        meterBrandId = items['meterBrandId']
        meterBrand_str = load_meterBrand(self, meterBrandId)
        self.dlg_meter.mtrmkCode_text.addItem(str(meterBrand_str))

        mtrSizeId = items['mtrSizeId']
        mtrSize = load_meterSize(self, mtrSizeId)
        self.dlg_meter.meterSize_text.addItem(str(mtrSize))

        mrtStateId = items['mrtStateId']
        meterStat_text = load_meterStat(self, mrtStateId)
        self.dlg_meter.meterStat_text.addItem(str(meterStat_text))

        average_use = items['average']
        self.dlg_meter.AVGWTUSG.setText(str(average_use))

        presentCountMeter_str = items['presentCountMeter']
        self.dlg_meter.PRSWTUSG.setText(str(presentCountMeter_str))

        installDate_str = items['installDate']
        self.dlg_meter.BGNMTRDT.setText(str(installDate_str))

        remark = getTileValue("remark", feature)
        self.dlg_meter.remark.setText(str(remark))

        self.dlg_meter.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_meter.show()
    else:
        print("Layer in not " + str(activeLayer))


def leak_form(self, feature, activeLayer):
    test_layer = getTileValue("leakNo", feature)
    if test_layer is not None:
        self.dlg_leak.tabWidget.setCurrentIndex(0)
        self.dlg_leak.globalId.setText("")
        self.dlg_leak.leakNo.setText("")
        self.dlg_leak.leakId.setText("")
        self.dlg_leak.leakDatetime.setText("")
        self.dlg_leak.locate.setText("")
        self.dlg_leak.cause.setText("")
        self.dlg_leak.pipeId.setText("")
        self.dlg_leak.depth.setText("")
        self.dlg_leak.pipeType.setText("")
        self.dlg_leak.pipeSize.setText("")
        self.dlg_leak.typeDescription.setText("")
        self.dlg_leak.repairBy.setText("")
        self.dlg_leak.repairDatetime.setText("")
        self.dlg_leak.description.setText("")
        self.dlg_leak.checker.setText("")
        self.dlg_leak.remark.setText("")

        """ TAB 0 """
        leakNo = getTileValue("leakNo", feature)
        self.dlg_leak.setWindowTitle(str(activeLayer) + ': ' + str(leakNo))
        self.dlg_leak.leakNo.setText(str(leakNo))

        globalId = getTileValue("globalId", feature)
        self.dlg_leak.globalId.setText(str(globalId))

        leakId = getTileValue("LEAK_ID", feature)
        self.dlg_leak.leakId.setText(str(leakId))

        leakDatetime = getTileValue("leakDatetime", feature)
        self.dlg_leak.leakDatetime.setText(str(leakDatetime))

        locate = getTileValue("locate", feature)
        self.dlg_leak.locate.setText(str(locate))

        cause = getTileValue("cause", feature)
        self.dlg_leak.cause.setText(str(cause))

        pipeId = getTileValue("pipeId", feature)
        self.dlg_leak.pipeId.setText(str(pipeId))

        depth = getTileValue("depth", feature)
        self.dlg_leak.depth.setText(str(depth))

        pipeTypeId = getTileValue("pipeTypeId", feature)
        pipeType = load_PipeType(self, pipeTypeId)
        self.dlg_leak.pipeType.setText(str(pipeType))

        pipeSizeId = getTileValue("pipeSizeId", feature)
        pipeSize = load_PipeSize(self, pipeSizeId)
        self.dlg_leak.pipeSize.setText(str(pipeSize))

        typeDescription = getTileValue("typeDescription", feature)
        self.dlg_leak.typeDescription.setText(str(typeDescription))

        informer = getTileValue("informer", feature)
        self.dlg_leak.informer.setText(str(informer))
        # informer_text = load_informer(self, informerId)
        """
        incidentNo = getTileValue("incidentNo", feature)
        incident_text = load_incident(self, incidentNo)
        self.dlg_leak.incidentNo.setText(str(incidentNo))

        incidentTypeId = getTileValue("incidentType", feature)
        incidentType_text = load_incidentType(self, incidentTypeId)
        self.dlg_leak.incidentType_text.addItem(str(incidentType_text))

        incidentCategoryId = getTileValue("incidentCategory", feature)
        incidentCategory_Text = load_incidentCategory(self, incidentCategoryId)
        self.dlg_leak.incidentCategory_Text.addItem(str(incidentCategory_Text))

        incidentCategorySubjectId = getTileValue("incidentCategorySubject", feature)
        incidentCategorySubject_text = load_incidentCategorySubject(self, incidentCategorySubjectId)
        self.dlg_leak.incidentCategorySubject_text.addItem(str(incidentCategorySubject_text))
        """
        """ TAB 1 """

        repairBy = getTileValue("repairBy", feature)
        self.dlg_leak.repairBy.setText(str(repairBy))

        repairCost = getTileValue("repairCost", feature)
        self.dlg_leak.repairCost.setText(str(repairCost))

        repairDatetime = getTileValue("repairDatetime", feature)
        self.dlg_leak.repairDatetime.setText(str(repairDatetime))

        description = getTileValue("description", feature)
        if description is None:
            description = getTileValue("detail", feature)
        self.dlg_leak.description.setText(str(description))

        checker = getTileValue("checker", feature)
        self.dlg_leak.checker.setText(str(checker))

        remark = getTileValue("remark", feature)
        self.dlg_leak.remark.setText(str(remark))
        """
        repaireCategoryId = getTileValue("repaireCategory", feature)
        repaireCategory = load_repaireCategory(self, repaireCategoryId)
        self.dlg_leak.repairCategory_text.addItem(str(repaireCategory))

        repairCategorySubjectId = getTileValue("repairCategorySubject", feature)
        repairCategorySubject = load_repairCategorySubject(self, repairCategorySubjectId)
        self.dlg_leak.repairCategorySubject_text.addItem(str(repairCategorySubject))

        rwCode = getTileValue("rwCode", feature)
        self.dlg_leak.rwCode.setText(str(rwCode))

        repairType = getTileValue("repairType", feature)
        repairType_text = load_repairType(self, repairType)
        self.dlg_leak.repairType_text.addItem(str(repairType_text))
        """
        self.dlg_leak.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_leak.show()
    else:
        print("Layer in not " + str(activeLayer))


def struct_form(self, feature, activeLayer):
    test_layer = getTileValue("STRUCT_ID", feature)
    if test_layer is not None:
        globalId = getTileValue("globalId", feature)
        structId = getTileValue("STRUCT_ID", feature)
        typeId = getTileValue("typeId", feature)

        self.dlg_struct.setWindowTitle(str(activeLayer) + ': ' + str(structId))

        self.dlg_struct.structId.setText(str(structId))
        self.dlg_struct.typeId.setText(str(typeId))
        self.dlg_struct.globalId.setText(str(globalId))

        self.dlg_struct.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_struct.show()
    else:
        print("Layer in not " + str(activeLayer))


def pipeServ_form(self, feature, activeLayer):
    test_layer = getTileValue("pipeserve_id", feature)
    if test_layer is not None:
        # globalId = getTileValue("globalId", feature)
        bldg_id = getTileValue("bldg_id", feature)
        pipeServe_id = getTileValue("pipeserve_id", feature)
        pipe_id = getTileValue("pipe_id", feature)

        self.dlg_pipeServ.setWindowTitle(str(activeLayer) + ': ' + str(pipeServe_id))

        self.dlg_pipeServ.bldgId.setText(str(bldg_id))
        self.dlg_pipeServ.pipeservId.setText(str(pipeServe_id))
        self.dlg_pipeServ.pipeId.setText(str(pipe_id))

        self.dlg_pipeServ.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_pipeServ.show()
    else:
        print("Layer in not " + str(activeLayer))


def flowMeter_form(self, feature, activeLayer):
    """ Set empty value """
    self.dlg_bldg.globalId.setText("")
    self.dlg_flowMeter.METER_ID.setText("")
    self.dlg_flowMeter.brandCode.setText("")
    self.dlg_flowMeter.loggerId.setText("")
    self.dlg_flowMeter.model.setText("")
    self.dlg_flowMeter.inputFlowChannel.setText("")
    self.dlg_flowMeter.flowMeterType.setText("")
    self.dlg_flowMeter.measureType.setText("")
    self.dlg_flowMeter.meterSize.setText("")
    self.dlg_flowMeter.remark.setText("")
    self.dlg_flowMeter.pipeSize.setText("")
    self.dlg_flowMeter.pipeType.setText("")

    """ Test layer is Flow Meter """
    test_layer = getTileValue("flowMeterType", feature)

    if test_layer is not None:
        flowMeterTypeId = getTileValue("flowMeterType", feature)
        self.dlg_flowMeter.setWindowTitle(str(activeLayer) + ': ' + str(flowMeterTypeId))
        self.dlg_flowMeter.flowMeterType.setText(str(flowMeterTypeId))

        globalId = getTileValue("globalId", feature)
        self.dlg_flowMeter.globalId.setText(str(globalId))

        METER_ID = getTileValue("METER_ID", feature)
        self.dlg_flowMeter.METER_ID.setText(str(METER_ID))

        brandCode = getTileValue("brandCode", feature)
        self.dlg_flowMeter.brandCode.setText(str(brandCode))

        loggerId = getTileValue("loggerId", feature)
        self.dlg_flowMeter.loggerId.setText(str(loggerId))

        # value = self.dlg_flowMeter.installedDate.dateTime()
        # l_date = value.toString("yyyy-MM-dd HH:mm:ssZ")
        installedDate = getTileValue("installedDate", feature)
        self.dlg_flowMeter.installedDate.setText(str(installedDate))

        # self.dlg_flowMeter.dateTimeLine.setVisible(False)
        # PyQt5.QtCore.QDateTime(2024, 7, 9, 15, 45, 22, 778)
        # value.toString("yyyy-MM-dd HH:mm:ssZ")
        # 2022-05-04T00:00:00Z

        model = getTileValue("model", feature)
        self.dlg_flowMeter.model.setText(str(model))

        inputFlowChannel = getTileValue("inputFlowChannel", feature)
        self.dlg_flowMeter.inputFlowChannel.setText(str(inputFlowChannel))

        flowMeterType = getTileValue("flowMeterType", feature)
        self.dlg_flowMeter.flowMeterType.setText(str(flowMeterType))

        measureType = getTileValue("measureType", feature)
        self.dlg_flowMeter.measureType.setText(str(measureType))

        meterSize = getTileValue("meterSize", feature)
        self.dlg_flowMeter.meterSize.setText(str(meterSize))

        remark = getTileValue("remark", feature)
        self.dlg_flowMeter.remark.setText(str(remark))

        pipeSize = getTileValue("pipeSize", feature)
        self.dlg_flowMeter.pipeSize.setText(str(pipeSize))

        pipeType = getTileValue("pipeType", feature)
        self.dlg_flowMeter.pipeType.setText(str(pipeType))

        self.dlg_flowMeter.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_flowMeter.show()
    else:
        print("Layer in not " + str(activeLayer))


def stepTest_form(self, feature, activeLayer):
    test_layer = getTileValue("stepNo", feature)
    if test_layer is not None:
        stepName = getTileValue("stepName", feature)
        self.dlg_stepTest.setWindowTitle(str(activeLayer) + ': ' + str(stepName))
        self.dlg_stepTest.stepName.setText(str(stepName))

        stepNo = getTileValue("stepNo", feature)
        self.dlg_stepTest.stepNo.setText(str(stepNo))

        JobStepId = getTileValue("JobStepId", feature)
        self.dlg_stepTest.JobStepId.setText(str(JobStepId))

        JobStepNo = getTileValue("JobStepNo", feature)
        self.dlg_stepTest.JobStepNo.setText(str(JobStepNo))

        dmaNo = getTileValue("dmaNo", feature)
        self.dlg_stepTest.dmaNo.setText(str(dmaNo))

        remark = getTileValue("remark", feature)
        self.dlg_stepTest.remark.setText(str(remark))

        self.dlg_stepTest.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.dlg_stepTest.show()

    else:
        print("Layer in not " + str(activeLayer))


def load_repairType(self, repairType):
    repairType_text = repairType
    return repairType_text


def load_repairCategorySubject(self, repairCategorySubjectId):
    repairCategorySubject_text = repairCategorySubjectId
    return repairCategorySubject_text


def load_repaireCategory(self, repaireCategoryId):
    repaireCategory_text = repaireCategoryId
    return repaireCategory_text


def load_incidentCategorySubject(self, incidentCategorySubjectId):
    incidentCategorySubject_text = incidentCategorySubjectId
    return incidentCategorySubject_text


def load_incidentCategory(self, incidentCategoryId):
    incidentCategory_Text = incidentCategoryId
    return incidentCategory_Text


def load_incidentType(self, incidentTypeId):
    incidentType_text = incidentTypeId
    return incidentType_text


def load_informer(self, informerId):
    informer_text = informerId
    return informer_text


def load_incident(self, incidentNo):
    incident_text = incidentNo
    return incident_text


def load_valveFunction(self, valveFunctionId):
    vFunction = self.valveFunctions
    valveFunction_text = ""
    for i in range(len(vFunction)):
        if valveFunctionId == vFunction[i]['functionId']:
            valveFunction_text = vFunction[i]['description']
    return valveFunction_text


def load_valveSize(self, valveSizeId):
    vSize = self.valveSizes
    valveSize_text = ""
    for i in range(len(vSize)):
        if valveSizeId == vSize[i]['sizeId']:
            valveSize_text = vSize[i]['description']
    return valveSize_text


def load_valveType(self, valveTypeId):
    vType = self.valveTypes
    valveType_text = ""
    for i in range(len(vType)):
        if valveTypeId == vType[i]['typeId']:
            valveType_text = vType[i]['description']
    return valveType_text


def load_valeStatus(self, valveStatusId):
    vStatus = self.valveStatus
    valveStatus_text = ""
    for i in range(len(vStatus)):
        if valveStatusId == vStatus[i]['statusId']:
            valveStatus_text = vStatus[i]['description']
    return valveStatus_text


def load_costCenters(self, costCenterId):
    costCenter = self.costcenters
    costCenters_text = ""
    for i in range(len(costCenter)):
        if costCenterId == costCenter[i]['costCenterId']:
            costCenters_text = str(costCenter[i]["depShortName"])
    return costCenters_text


def load_pwaStations(self, stationId):
    station_ref = self.pwaStations
    pwaStation_text = ""
    for i in range(len(station_ref)):
        if stationId == station_ref[i]['stationId']:
            pwaStation_text = str(station_ref[i]["description"])
    return pwaStation_text


def load_FireSize(self, sizeId):
    firehydrantSizes = self.firehydrantSizes
    size_text = ""
    for i in range(len(firehydrantSizes)):
        if sizeId == firehydrantSizes[i]["sizeId"]:
            size_text = str(firehydrantSizes[i]["description"])
    return size_text


def load_FireStatus(self, statusId):
    firehydrantStatus = self.firehydrantStatus
    status_text = ""
    for i in range(len(firehydrantStatus)):
        if statusId == firehydrantStatus[i]["statusId"]:
            status_text = str(firehydrantStatus[i]["description"])
            i = len(firehydrantStatus)
    return status_text


def load_PipeSize(self, sizeId):
    pipeSize = self.pipeSizes
    size_text = str(sizeId)
    for i in range(len(pipeSize)):
        if sizeId == pipeSize[i]["sizeId"]:
            size_text = str(pipeSize[i]["description"])
    return size_text


def load_PipeGrade(self, gradeId):
    pipeGrades = self.pipeGrades
    grade_text = str(gradeId)
    for i in range(len(pipeGrades)):
        if gradeId == pipeGrades[i]["gradeId"]:
            grade_text = str(pipeGrades[i]["description"])
    return grade_text


def load_PipeType(self, typeId):
    pipeTypes = self.pipeTypes
    type_text = str(typeId)
    for i in range(len(pipeTypes)):
        if typeId == pipeTypes[i]["typeId"]:
            type_text = str(pipeTypes[i]["description"])
    return type_text


def load_PipeClasses(self, classId):
    pipeClass = self.pipeClasses
    class_text = str(classId)
    for i in range(len(pipeClass)):
        if classId == pipeClass[i]["classId"]:
            class_text = str(pipeClass[i]["description"])
    return class_text


def load_PipeFunction(self, functionId):
    pipeFunction = self.pipeFunctions
    function_text = str(functionId)
    for i in range(len(pipeFunction)):
        if functionId == pipeFunction[i]["functionId"]:
            function_text = str(pipeFunction[i]["description"])
    return function_text


def load_PipeLaying(self, layingId):
    pipeLaying = self.pipeLayings
    laying_text = str(layingId)
    for i in range(len(pipeLaying)):
        if layingId == pipeLaying[i]["layingId"]:
            laying_text = str(pipeLaying[i]["description"])
    return laying_text


def load_PipeProduct(self, productId):
    pipeProducts = self.pipeProducts
    product_text = str(productId)
    for i in range(len(pipeProducts)):
        if productId == pipeProducts[i]["productId"]:
            product_text = str(pipeProducts[i]["description"])
    return product_text


def load_bldgType(self, typeId):
    buildingType = self.buildingTypes
    buildingType_text = str(typeId)
    for i in range(len(buildingType)):
        if typeId == buildingType[i]["typeId"]:
            buildingType_text = str(buildingType[i]["description"])
    return buildingType_text


def load_bldgUseStatus(self, statusId):
    useStatus = self.useStatus
    useStatu_text = str(statusId)
    for i in range(len(useStatus)):
        if statusId == useStatus[i]["statusId"]:
            useStatu_text = str(useStatus[i]["description"])
    return useStatu_text


def load_bldgUseType(self, useType):
    buildingUseType = self.building_useType
    useType_text = str(useType)
    for i in range(len(buildingUseType)):
        if useType == buildingUseType[i]["useType"]:
            useType_text = str(buildingUseType[i]["useName"])
    return useType_text


def load_meterBrand(self, meterBrandId):
    meterBrand = self.meter_brand
    brandName = str(meterBrandId)
    for i in range(len(meterBrand)):
        if int(meterBrandId) == meterBrand[i]["id"]:
            brandName = str(meterBrand[i]["brandName"])
    return brandName


def load_meterSize(self, meterSizeId):
    meterSize = self.meter_size
    meterSize_text = str(meterSizeId)
    for i in range(len(meterSize)):
        if meterSizeId == meterSize[i]["id"]:
            meterSize_text = str(meterSize[i]["sizeName"])
    return meterSize_text


def load_meterStat(self, mrtStateId):
    mrtState_txt = ""
    if mrtStateId == 1:
        mrtState_txt = "ปรกติ"
    elif mrtStateId == 2:
        mrtState_txt = "ผิดปรกติ"
    elif mrtStateId == 3:
        mrtState_txt = "มาตรวัดน้ำชำรุด"
    elif mrtStateId == 4:
        mrtState_txt = "มาตรวัดน้ำสูญหาย"
    elif mrtStateId == 5:
        mrtState_txt = "มาตรวัดน้ำมัว"

    return mrtState_txt


def getBldg(self, bldgCollection, custCode):
    if checkNetConnection() is True:
        t_status = check_token_expired(self)
        if t_status == "1":
            t_status = load_new_token(self)
        if t_status == "0":
            url = self.baseUrl + "/api/2.0/resources/features/pwa/collections/" + str(bldgCollection) + "/items?custCode=" + str(custCode)

            payload = {}
            headers = {
                'Authorization': 'Bearer ' + self.token_new
            }
            response = requests.request("GET", url, headers=headers, data=payload)
            if response.status_code == 200:
                numberReturn = response.json()["numberReturned"]
                if numberReturn > 0:
                    properties = response.json()["features"][0]["properties"]
                    useStatusId_fea = properties['useStatusId']
                    useTypeId_fea = properties['useTypeId']
                    return useStatusId_fea, useTypeId_fea
            else:
                useStatusId_fea = None
                useTypeId_fea = None
                return useStatusId_fea, useTypeId_fea

        else:
            message = "Can not get token from server"
            self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)
    else:
        message = "No internet connection."
        self.iface.messageBar().pushMessage("Warning  ", message, level=2, duration=3)


def create_style(self, tileId, layerType):
    branch = "B" + self.currentbranch
    layer = layerType  # "BLDG"
    tileId = tileId  # "66591529dd708e21f678ab20"

    input_file = "STYLE_TEMPLATE_" + layer + ".json"
    input_path = os.path.join(self.plugin_dir, "style_template", input_file)
    output_file = branch + "_" + layer + ".json"
    out_path = os.path.join(self.plugin_dir, "style", output_file)

    title = "TILE_" + branch + "_" + layer

    with open(input_path, 'r', encoding='utf-8') as file:  # open file in read-mode
        data = json.load(file)

        sources = {'id': tileId, 'title': title, "type": "vector",
                   "url": "https://gisdb.pwa.co.th/core/api/tiles/1.0-beta/tiles/" + tileId + "?api_key=EBATVwdYwLXWAnrOf04lpQa8MYGIQIlLCIrkDgIoUsw3XIPgNOmWomLFW9u9Vub9"}

        osm = {'id': 'osm', 'type': 'vector', 'url': 'https://gisdb.pwa.co.th/core/api/tiles/1.0-beta/tiles/public/osm'}
        if layer == "BLDG":
            data['sources'] = {tileId: sources, 'osm': osm}
        else:
            data['sources'] = {tileId: sources}

        for i in range(len(data['layers'])):
            temp_id = data['layers'][i]['id']
            split_id = temp_id.split('_')
            j = 1
            layersId = ""
            if layer == "PIPE" or layer == "PWA_WATERWORKS" or layer == "STEP_TEST" or layer == "FLOW_METER":
                layersId = ""
            else:
                while j < len(split_id):
                    layersId = layersId + '_' + split_id[j]
                    j = j + 1
                data['layers'][i]['id'] = branch + layersId
            if layer == "STEP_TEST" and i == 0:
                pass
            else:
                data['layers'][i]['source'] = tileId
                data['layers'][i]['source-layer'] = tileId
    newData = json.dumps(data, indent=4)  # dump jsonfile
    with open(out_path, 'w', encoding='utf-8') as file:  # open file in write-mode
        file.write(newData)


def lodCusAddressTile(self):
    custCode = self.dlg_bldg.custCode.text()
    if len(custCode) > 0:
        customerInfo = load_customer_new(self, custCode)
        if len(customerInfo) > 0:  # Correct 27-11-2567
            installCusTitle = customerInfo['installCusTitle']
            if installCusTitle == 'NULL':
                installCusTitle = ""
            installCusName = customerInfo['installCusName']
            print("Name : " + installCusName) # Test
            installCusSurname = customerInfo['installCusSurname']
            custFullName = str(installCusTitle) + str(installCusName) + " " + str(installCusSurname)
            self.dlg_bldg.custName_Surname.setText(str(custFullName))

            addressNo = customerInfo['addressNo']
            building = customerInfo['building']
            floor = customerInfo['floor']
            villageNo = customerInfo['villageNo']
            village = customerInfo['village']
            road = customerInfo['road']
            soi = customerInfo['soi']
            province = customerInfo['provinceName']
            amphur = customerInfo['amphurName']
            district = customerInfo['districtName']
            zipcode = customerInfo['zipcode']
            tel = customerInfo['tel']

            self.dlg_bldg.addressNo_cus.setText(str(addressNo))
            self.dlg_bldg.BUILDING.setText(str(building))
            self.dlg_bldg.FLOOR.setText(str(floor))
            self.dlg_bldg.VILLAGE.setText(str(village))
            self.dlg_bldg.VILLAGENO.setText(str(villageNo))
            self.dlg_bldg.ROAD.setText(str(road))
            self.dlg_bldg.SOI.setText(str(soi))
            self.dlg_bldg.SUBDISTRICT.setText(str(district))
            self.dlg_bldg.DISTRICT.setText(str(amphur))
            self.dlg_bldg.PROVINCE.setText(str(province))
            self.dlg_bldg.ZIPCODE.setText(str(zipcode))
            self.dlg_bldg.tel.setText(str(tel))


def loadCusAddressMeterTile(self):
    custCode = self.dlg_meter.custCode.text()
    if len(custCode) > 0:
        customerInfo = load_customer_new(self, custCode)
        if len(customerInfo) > 0: # Correct 27-11-2567
            installCusTitle = customerInfo['installCusTitle']
            if installCusTitle == 'NULL':
                installCusTitle = ""
            installCusName = customerInfo['installCusName']
            print("Name : " + installCusName)  # Test
            installCusSurname = customerInfo['installCusSurname']
            custFullName = str(installCusTitle) + str(installCusName) + " " + str(installCusSurname)
            self.dlg_bldg.custName_Surname.setText(str(custFullName))

            addressNo = customerInfo['addressNo']
            building = customerInfo['building']
            floor = customerInfo['floor']
            villageNo = customerInfo['villageNo']
            village = customerInfo['village']
            road = customerInfo['road']
            soi = customerInfo['soi']
            province = customerInfo['provinceName']
            amphur = customerInfo['amphurName']
            district = customerInfo['districtName']
            zipcode = customerInfo['zipcode']
            tel = customerInfo['tel']

            meterRouteId = customerInfo['meterRouteId']
            meterRouteSeq = customerInfo['meterRouteSeq']
            contactNo = customerInfo['contracNo']

            self.dlg_meter.custName_Surname.setText(str(custFullName))
            self.dlg_meter.MTRRDROUTE.setText(str(meterRouteId))
            self.dlg_meter.MTRSEQ.setText(str(meterRouteSeq))
            self.dlg_meter.CONTRACNO.setText(str(contactNo))

            self.dlg_meter.addressNo_cus.setText(str(addressNo))
            self.dlg_meter.BUILDING.setText(str(building))
            self.dlg_meter.FLOOR.setText(str(floor))
            self.dlg_meter.VILLAGE.setText(str(village))
            self.dlg_meter.VILLAGENO.setText(str(villageNo))
            self.dlg_meter.ROAD.setText(str(road))
            self.dlg_meter.SOI.setText(str(soi))
            self.dlg_meter.SUBDISTRICT.setText(str(district))
            self.dlg_meter.DISTRICT.setText(str(amphur))
            self.dlg_meter.PROVINCE.setText(str(province))
            self.dlg_meter.ZIPCODE.setText(str(zipcode))
            self.dlg_meter.tel.setText(str(tel))